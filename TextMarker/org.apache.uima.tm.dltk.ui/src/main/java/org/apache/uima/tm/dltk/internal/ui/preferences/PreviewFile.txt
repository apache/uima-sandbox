#-------------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#-------------------------------------------------------------------------------

PACKAGE de.uniwue.casetrain;

SCRIPT de.uniwue.casetrain.DashTree;
SCRIPT de.uniwue.casetrain.DashTreeError;
SCRIPT de.uniwue.casetrain.BuildTree;
TYPESYSTEM de.uniwue.casetrain.TerminologyTypeSystem;

Document{-> CALL(DashTree)};
 
DECLARE link;
entryContent curlyBracketsOpen inCurlyBrackets{-PARTOF(link) -> MARK(link,3)} curlyBracketsClose;

Document{-> RETAINTYPE};

// *** error handling ***
Document{-> CALL(DashTreeError)};
// *** end of error handling ***

// *** statistics ***
INT count;
Document{TOTALCOUNT(error,1,1000000,count)
    -> LOG("Longmenu.txt: Es wurde(n) "+(count)+" Fehler gefunden!")};
Document{TOTALCOUNT(rootRow,1,1000000,count)
    -> LOG("Longmenu.txt: Es wurde(n) "+(count)+" Wurzel-Elemente gefunden.")};
Document{TOTALCOUNT(childRow,1,1000000,count)
    -> LOG("Longmenu.txt: Es wurde(n) "+(count)+" Kind-Elemente gefunden.")};
// *** end of statistics ***

INT id;

ACTION IncID = (ASSIGN(id,id+1));


BLOCK(ChildRows) childRow{} {
    childRow[1,9]{-> ASSIGN(id,1+id),
        CREATE(Term,
        "Text" = entryContent,
        "Info" = link,
        "Id" = "A" + (id),
        "TermType" = "answer")};
}

BLOCK(RootRow) rootRow{} {
    rootRow{-> ASSIGN(id,1+id),
        CREATE(Term,
        "Text" = entryContent,
        "Info" = link,
        "Id" = "A" + (id),
        "TermType" = "answer")};
}

Term{PARTOF(rootRow) -> TRANSFER(Root)};

Term{PARTOF(rootRow) -> MARK(SubTree,1,2)} Term+{-PARTOF(rootRow)};
Document{-> CALL(BuildTree.BuildDashTree)};


