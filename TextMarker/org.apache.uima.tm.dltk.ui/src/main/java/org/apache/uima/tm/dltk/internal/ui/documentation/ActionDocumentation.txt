#-------------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#-------------------------------------------------------------------------------

[{TableOfContents}]

!! __ADD__
This action adds lists or single values to a given list

__Definition__

%%prettify 
{{{
ADD(ListVariable,(Argument)+)
}}}
/%

__Example__

%%prettify 
{{{
Document{->ADD(list, var)};
}}}
/%


In this example, the variable "var" is added to the list "list".
----

!! __ASSIGN__
This action assigns a numerical value to a numerical variable.

__Definition__

%%prettify 
{{{
ASSIGN(Variable,NumericalExpression)
}}}
/%

__Example__

%%prettify 
{{{
Document{->ASSIGN(amount, (amount/2))};
}}}
/%


In this example, the value of the variable amount is halved.

----

!! __CALL__
The CALL action initiates the execution of a different script file or script block. Currently only complete script files are supported.

__Definition__
%%prettify 
{{{
CALL(DifferentFile)
}}}
/%

__Example__
%%prettify 
{{{
Document{->CALL(NamedEntities)};
}}}
/%
Here, a script for named entity recognition is executed.

----


!! __CLEAR__
This action removes all elements of the given list.

__Definition__

%%prettify 
{{{
CLEAR(ListVariable)
}}}
/%

__Example__

%%prettify 
{{{ 
Document{-> CLEAR(SomeList)};
}}}
/%
This rule clears the list SomeList.
----

!! __COLOR__
The COLOR action set the color of a annotation type in the modified view if the rule is fired. The supported colors are: black, silver, gray, white, maroon, red, purple, fuchsia, green, lime, olive, yellow, navy, blue, aqua, lightblue, lightgreen, orange, pink, salmon, cyan, violet, tan, brown, white, mediumpurple.

__Definition__

%%prettify 
{{{
COLOR(TypeExpression,StringExpression)
}}}
/%

__Example__

%%prettify 
{{{
Document{->COLOR(Headline,"red")};
}}}
/%
This rule colors all Headline in the modified view.
----

!! __CREATE__
This action creates a complex structure, a annotation with features.

__Definition__

%%prettify 
{{{
CREATE(TypeExpression(,NumberExpression)*(,StringExpression = Expression)+)
}}}
/%

__Example__

%%prettify 
{{{
Paragraph{COUNT(ANY,0,10000,variable)->CREATE(Headline,"size" = variable)};
}}}
/%

----

!! __DEL__

The DEL action deletes the matched text fragments in the modified view.

__Definition__

%%prettify 
{{{
DEL
}}}
/%

__Example__

%%prettify 
{{{
Name{->DEL};
}}}
/%
This rule deletes all text fragments that are annotated with a Name annotation.

----


!! __EXEC__
The EXEC action initiates the execution of a different script file or analysis engine on the complete input document.

__Definition__
%%prettify 
{{{
EXEC(DifferentFile)
}}}
/%

__Example__
%%prettify 
{{{
ENGINE NamedEntities;
Document{->EXEC(NamedEntities)};
}}}
/%
Here, an analysis engine for named entity recognition is executed once on the complete document independent of the matched text and the current filtering settings. If the argument refers to another script file, then then a new view on the document is created: the complete text of the original CAS and with the default filtering settings of the TextMarker analysis engine.

----

!! __FILL__
This action fills a complex structure, an annotation of the given type with feature values.

__Definition__

%%prettify 
{{{
FILL(TypeExpression(,StringExpression = Expression)+)
}}}
/%

__Example__

%%prettify 
{{{
Headline{COUNT(ANY,0,10000,variable)->FILL(Headline,"size" = variable)};
}}}
/%

----
!! __FILTERMARKUP__
This action filters the given types of markup. They are now ignored by rules.

__Definition__

%%prettify 
{{{
FILTERMARKUP((StringExpression(,StringExpression)*))?
}}}
/%

__Example__

%%prettify 
{{{
Document{->FILTERMARKUP(br)};
}}}
/%

This rule filters all <br> markup in the input document.

----

!! __FILTERTYPE__

This action filters the given types of annotation. They are now ignored by rules. Expressions are not yet supported.

__Definition__

%%prettify 
{{{
FILTERTYPE((TypeExpression(,TypeExpression)*))?
}}}
/%

__Example__

%%prettify 
{{{
Document{->FILTERTYPE(SW)};
}}}
/%

This rule filters all small written words in the input document.
----

!! __GATHER__
This action creates a complex structure, a annotation with features. The features are collected using the given indexes of the rule elements of the complete rule.

__Definition__

%%prettify 
{{{
GATHER(TypeExpression(,NumberExpression)*(,StringExpression = NumberExpression)+)
}}}
/%

__Example__

%%prettify 
{{{
A B C{-> GATHER(FS, "a" = 1, "b" = 2)};
}}}
/%
This rule creates a Feature Structure FS and assigns the annotation A (matched by the first rule element) and the annotation B (matched by the second rule element) the the features "a" and "b" of that feature structure. 

----

!! __GET__
This action retrieves  an element of the given list dependent on a given strategy.

__Definition__

%%prettify 
{{{
GET(ListExpression, Variable, StringExpression)
}}}
/%

__Example__

%%prettify 
{{{
Document{->GET(list, var, "dominant")};
}}}
/%

In this example, the element of the list that occurs most is stored in the variable "var".
----


!! __GETFEATURE__
This action stores the value of the given feature of the matched annotation type in the given variable.

__Definition__

%%prettify 
{{{
GETFEATURE(StringExpression, Variable)
}}}
/%

__Example__

%%prettify 
{{{
Document{->GETFEATURE("language", stringVar)};
}}}
/%

In this example, variable "stringVar" will contain the value of the feature "language".
----

!! __GETLIST__
This action retrieves a list of elements dependent on a given strategy.

__Definition__

%%prettify 
{{{
GETLIST(ListVariable, StringExpression)
}}}
/%

__Example__


----

!! __LOG__
The LOG action simply writes a log message

__Definition__

%%prettify 
{{{
LOG(StringExpression)
}}}
/%

__Example__

%%prettify 
{{{
Document{->LOG("processed")};
}}}
/%

This rule writes a log message with the string "processed".

----

!! __MARK__
The MARK action is the most important action in the TextMarker system. This action creates a new annotation dependent on the text fragments or annotations matched by the rule. The indexes can be used to create an annotation the spanns the matched information of several rule elements.

__Definition__

%%prettify 
{{{
MARK(TypeExpression(,NumericalExpression)*)
}}}
/%

__Example__

%%prettify 
{{{
Freeline Paragraph{->MARK(ParagraphAfterFreeline,1,2)};
}}}
/%

This rule matches on a free line followed by a paragraph and annotates both in a single ParagraphAfterFreeline annotation. The two numberical expressions at the end of the mark action indicate that the matched text of the first and the second rule elements are joined to create the boundaries of the new annotation.

----

!! __MARKONCE__

This action has the same functionality as MARK, but creates a new annotation only if it does not yet exist.

----

!! __MARKFAST__
The MARKFAST action uses an external ressource to annotate the content of the matched annotation more efficiently. It provides options for "ignoreCase" and an amount of characters for the threshold.

__Definition__

%%prettify 
{{{
MARKFAST(TypeExpression,ListExpression(,BooleanExpression(,NumberExpression)?)?)
}}}
/%

__Example__

%%prettify 
{{{
Document{->MARKFAST(FirstName,'firstnames.txt',true,2)};
}}}
/%

This rule annotates all first names in the document and ignore the case if the length of the word is greater than 2.

----

!! __MARKLAST__
The MARKLAST action annotates the last token of the matched annotation with the given type.

__Definition__

%%prettify 
{{{
MARKLAST(TypeExpression)
}}}
/%

__Example__

%%prettify 
{{{
Document{->MARKLAST(Last)};
}}}
/%

This rule annotates the last token of the document.

----

!! __MARKSCORE__
The MARKSCORE action is provides the same functionality as the MARK action. Furthermore heuristic scores are supported.

__Definition__

%%prettify 
{{{
MARKSCORE(NumberExpression,TypeExpression(,NumericalExpression)*)
}}}
/%

__Example__

%%prettify 
{{{
Freeline Paragraph{->MARKSCORE(10,ParagraphAfterFreeline,1,2)};
}}}
/%

This rule matches on a free line followed by a paragraph and annotates both in a single ParagraphAfterFreeline annotation. The two numberical expressions at the end of the mark action indicate that the matched text of the first and the second rule elements are joined to create the boundaries of the new annotation. Additionally, the score "10" is added to the heuristic threshold of this annotation.

----

!! __MARKTABLE__
The MARKTABLE action creates possibly new complex annoattions and is able to assign entries of the given table to its features.

__Definition__

%%prettify 
{{{
MARKTABLE(TypeExpression, NumberExpression, TableExpression, (,StringExpression = NumberExpression)+)
}}}
/%

__Example__

%%prettify 
{{{
Document{-> MARKTABLE(Struct, 1, TestTable, "first" = 2)};
}}}
/%

In this example, the document is searched for all occurences of the entries of the first column of the given table, an annotation of the type Struct is created and its feature "first" is filled with the entry of the second column.

----

!! __MERGE__
This action merges the given lists. The first parameter defines if it is an intersection or union. The second parameter is the list variable that will contain the result.

__Definition__

%%prettify 
{{{
MERGE(BooleanExpression, ListVariable, ListExpression, (ListExpression)+)
}}}
/%

__Example__

%%prettify 
{{{
Document{->MERGE(false, listVar, list1, list2, list3)};
}}}
/%

The elements that occur in all three lists will be placed in the list listVar.
----

!! __MATCHEDTEXT__

__Definition__

%%prettify 
{{{
MATCHEDTEXT(StringVariable(,NumericalExpression)*)
}}}
/%

__Example__

%%prettify 
{{{
Paragraph{->MATCHEDTEXT(StringVariable)};
}}}
/%

----


!! __REMOVE__
This action removes lists or single values from a given list

__Definition__

%%prettify 
{{{
REMOVE(ListVariable,(Argument)+)
}}}
/%

__Example__

%%prettify 
{{{
Document{->REMOVE(list, var)};
}}}
/%


In this example, the variable "var" is removed from the list "list".
----


!! __REMOVEDUPLICATE__
This action removes all duplicates of a given list

__Definition__

%%prettify 
{{{
REMOVEDUPLICATE(ListVariable)
}}}
/%

__Example__

%%prettify 
{{{
Document{->REMOVEDUPLICATE(list)};
}}}
/%

----

!! __REPLACE__
The REPLACE action remembers the modification for the matched annotation.

__Definition__

%%prettify 
{{{
REPLACE(StringExpression)
}}}
/%

__Example__

%%prettify 
{{{
FirstName{->REPLACE("first name")};
}}}
/%


This rule replaces all first names with the string "first name".

----

!! __RETAINMARKUP__
This action retains the given types of markup. They are now not ignored by rules.

__Definition__

%%prettify 
{{{
RETAINMARKUP((StringExpression(,StringExpression)*))?
}}}
/%

__Example__

%%prettify 
{{{
Document{->RETAINMARKUP("img")};
}}}
/%

All <img> markup elements are retained and can be macthed by rules.

----

!! __RETAINTYPE__
This action retains the given types. They are now not ignored by rules.

__Definition__

%%prettify 
{{{
RETAINTYPE((TypeExpression(,TypeExpression)*))?
}}}
/%

__Example__

%%prettify 
{{{
Document{->RETAINTYPE(SPACE)};
}}}
/%

All spaces are retained and can be macthed by rules.

----

!! __SETFEATURE__
This action sets the value of a feature of the matched complex structure or annotation.

__Definition__

%%prettify 
{{{
SETFEATURE(StringExpression,Expression)
}}}
/%

__Example__

%%prettify 
{{{
Document{->SETFEATURE("language","en")};
}}}
/%
Here, the language of the input document is set to english.

----

!! __TRANSFER__
This action creates a new feature structure and adds all compatible features of the matched annotation.

__Definition__

%%prettify 
{{{
TRANSFER(TypeExpression)
}}}
/%

__Example__

%%prettify 
{{{
Document{->TRANSFER(LanguageStorage)};
}}}
/%
Here, a new feature structure "LanguageStorage" is created and the features of the DocumentAnnotation are copied. E.g., if LanguageStorage defined a feature named "language", then the feature value of the DocumentAnnotation is copied.

----


!! __TRIE__
This action uses an external multi tree word list to annotated the matched annotation and provides several configuration paramters.

__Definition__

%%prettify 
{{{
TRIE((String = Type)+,ListExpression,Boolean,Number,Boolean,Number,String)
}}}
/%

__Example__

%%prettify 
{{{
Document{->TRIE("FirstNames.txt" = FirstName, "Companies.txt" = Company, 'Dictionary.mtwl', true, 4, false, 0, ".,-/ ")};
}}}
/%

Here, the Dictionary.mtwl that contains word lists for first names and companies is used to annotate the document. The words previously contained in the FirstNames.txt are annotated with the type FirstName and the word in the Companies.txt with the type Company. The case of the word is ignored if the length of the word exceeds 4. The edit distance is deactivated. The cost of an edit operation can currently not be configured by an argument. The last argument additionally defines several chars that will be ignored.

----

!! __UNMARK__
This action removes the annotation of the given type overlapping the matched text. 

__Definition__

%%prettify 
{{{
UNMARK(TypeExpression)
}}}
/%

__Example__

%%prettify 
{{{
Headline{->UNMARK(Headline)};
}}}
/%
Here, the headline annotation is removed.


----

!! __UNMARKALL__
This action removes the annotation of the given type and all of its descendants overlapping the matched text. 

__Definition__

%%prettify 
{{{
UNMARKALL(TypeExpression, TypeListExpression)
}}}
/%

__Example__

%%prettify 
{{{
Annotation{->UNMARKALL(Annotation, {Headline})};
}}}
/%
Here, all annotations but headlines are removed.

