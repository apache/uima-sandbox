/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.uima.textmarker.seed;

import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.tcas.Annotation;
import org.apache.uima.textmarker.type.AMP;
import org.apache.uima.textmarker.type.BREAK;
import org.apache.uima.textmarker.type.CAP;
import org.apache.uima.textmarker.type.COLON;
import org.apache.uima.textmarker.type.COMMA;
import org.apache.uima.textmarker.type.CW;
import org.apache.uima.textmarker.type.EXCLAMATION;
import org.apache.uima.textmarker.type.MARKUP;
import org.apache.uima.textmarker.type.NBSP;
import org.apache.uima.textmarker.type.NUM;
import org.apache.uima.textmarker.type.PERIOD;
import org.apache.uima.textmarker.type.QUESTION;
import org.apache.uima.textmarker.type.SEMICOLON;
import org.apache.uima.textmarker.type.SPACE;
import org.apache.uima.textmarker.type.SPECIAL;
import org.apache.uima.textmarker.type.SW;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.4.1 on 21.12.06
 * 21:50 from the specification file
 */
public class SourceLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  public static final int COMMENT = 1;

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = { 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 4, 0, 0, 4, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 23, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 21, 0, 22, 5, 2,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 15, 7, 0, 8, 24, 0, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      16, 1, 19, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 26, 12, 26, 26, 26, 26, 26, 26,
      26, 26, 26, 26, 26, 11, 26, 14, 26, 26, 13, 26, 26, 26, 26, 26, 26, 26, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0,
      0, 25, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0,
      25, 0, 0, 0 };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\2"
          + "\1\7\1\2\1\10\1\11\1\12\1\13\1\14\1\15" + "\1\16\1\1\2\0\1\17\1\3\1\20\7\0\1\1"
          + "\1\21\1\22\1\1\1\23\1\0\1\24\2\0\1\25" + "\3\0";

  private static int[] zzUnpackAction() {
    int[] result = new int[44];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\34\0\70\0\124\0\160\0\214\0\70\0\250"
          + "\0\304\0\70\0\340\0\374\0\70\0\70\0\70\0\70"
          + "\0\70\0\70\0\u0118\0\u0134\0\u0150\0\u016c\0\u0188\0\70"
          + "\0\u01a4\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u0230\0\u024c\0\u0268"
          + "\0\70\0\70\0\u0284\0\70\0\u02a0\0\70\0\u02bc\0\u02d8"
          + "\0\70\0\u02f4\0\u0310\0\u032c";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[44];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"
          + "\1\3\1\12\1\13\4\14\1\15\4\4\1\16\1\17" + "\1\20\1\21\1\22\2\14\1\4\5\23\1\24\1\25"
          + "\25\23\35\0\1\26\11\0\4\27\1\0\4\26\5\0" + "\2\27\1\26\2\0\1\5\34\0\1\6\36\0\1\30"
          + "\25\0\5\31\1\32\2\31\1\0\23\31\1\0\1\33" + "\11\0\1\34\3\33\1\0\1\35\3\33\6\0\1\33"
          + "\14\0\4\14\12\0\2\14\1\0\5\23\1\36\1\37"
          + "\32\23\1\40\1\41\32\23\1\42\1\43\25\23\1\0"
          + "\1\26\16\0\4\26\7\0\1\26\13\0\4\27\12\0"
          + "\2\27\1\0\10\31\1\44\23\31\10\45\1\44\23\45"
          + "\1\0\1\33\11\0\4\33\1\46\4\33\6\0\1\33" + "\2\0\1\33\11\0\1\33\1\47\2\33\1\46\4\33"
          + "\6\0\1\33\2\0\1\33\11\0\4\33\1\46\1\33" + "\1\50\2\33\6\0\1\33\1\0\5\23\1\40\1\0"
          + "\32\23\1\0\1\43\32\23\1\40\1\37\32\23\1\36"
          + "\1\43\25\23\10\45\1\51\23\45\1\0\1\33\11\0" + "\2\33\1\52\1\33\1\46\4\33\6\0\1\33\2\0"
          + "\1\33\11\0\4\33\1\46\2\33\1\53\1\33\6\0" + "\1\33\2\0\1\33\11\0\3\33\1\54\1\46\4\33"
          + "\6\0\1\33\2\0\1\33\11\0\4\33\1\46\3\33" + "\1\54\6\0\1\33\2\0\1\33\11\0\4\33\1\12"
          + "\4\33\6\0\1\33\1\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;

  private static final int ZZ_NO_MATCH = 1;

  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error",
      "Error: could not match input", "Error: pushback value was too large" };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\1\1\11\3\1\1\11\2\1\1\11\2\1"
          + "\6\11\1\1\2\0\2\1\1\11\7\0\1\1\2\11" + "\1\1\1\11\1\0\1\11\2\0\1\11\3\0";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[44];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read from input
   */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int number = 0;

  private int comment_count = 0;

  private Map<String, String> tags = new HashMap<String, String>();

  private JCas cas;

  private final static Pattern tagPattern = Pattern.compile("<([A-Za-z�������_0-9:]+)([^>]*)>"); // <font

  // color='red'>

  // --> group(1)=font

  private void splitAndPutInMap(String tag) {
    Matcher m = tagPattern.matcher(tag);
    if (m.find()) {
      tags.put(m.group(1).toLowerCase(), m.group(2));
    }
  }

  private void removeTag(String closingTag) {
    String cTag = closingTag.replace("</", "");

    cTag = cTag.replace(">", "").toLowerCase();
    tags.remove(cTag.trim());
  }

  // private String removeBrackets(String tag){
  // String result = tag.replace("<","");
  // return result.replace(">","").trim();
  // }

  /**
   * Creates a new scanner There is also a java.io.InputStream version of this constructor.
   * 
   * @param in
   *          the java.io.Reader to read input from.
   */
  public SourceLexer(java.io.Reader in, JCas cas) {
    this.zzReader = in;
    this.cas = cas;
  }

  /**
   * Creates a new scanner. There is also java.io.Reader version of this constructor.
   * 
   * @param in
   *          the java.io.Inputstream to read input from.
   */
  SourceLexer(java.io.InputStream in, JCas cas) {
    this(new java.io.InputStreamReader(in), cas);
  }

  /**
   * Refills the input buffer.
   * 
   * @return <code>false</code>, iff there was new input.
   * 
   * @exception java.io.IOException
   *              if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzPushbackPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

    if (numRead < 0) {
      return true;
    } else {
      zzEndRead += numRead;
      return false;
    }
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Resets the scanner to read from a new input stream. Does not close the old reader.
   * 
   * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer
   * is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
   * 
   * @param reader
   *          the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   * 
   * @param newState
   *          the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the matched text.
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   * 
   * @param pos
   *          the position of the character to fetch. A value from 0 to yylength()-1.
   * 
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   * 
   * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback
   * rule) this method will only be called with things that "Can't Possibly Happen". If this method
   * is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
   * 
   * Usual syntax/scanner level error handling should be done in error fallback rules.
   * 
   * @param errorCode
   *          the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   * 
   * They will be read again by then next call of the scanning method
   * 
   * @param number
   *          the number of characters to be read again. This number must not be greater than
   *          yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   * 
   * @return the next token
   * @exception java.io.IOException
   *              if any I/O-Error occurs
   */
  public Annotation yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar += zzMarkedPosL - zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yyline++;
            zzR = false;
            break;
          case '\r':
            yyline++;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
            }
            break;
          default:
            zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one
        // line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek)
          yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int i = zzRowMapL[zzState];
          if (zzInput >= zzCMapL.length) {
            System.out.println("here!!!");
            return null;
          }
          char c = zzCMapL[zzInput];
          int zzNext = zzTransL[i + c];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: {
          SW t = new SW(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 22:
          break;
        case 11: {
          COMMA t = new COMMA(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 23:
          break;
        case 5: {
          SPACE t = new SPACE(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 24:
          break;
        case 13: {
          EXCLAMATION t = new EXCLAMATION(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 25:
          break;
        case 3: {
          CW t = new CW(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 26:
          break;
        case 21: {
          removeTag(yytext());
          MARKUP t = new MARKUP(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 27:
          break;
        case 19: {
          splitAndPutInMap(yytext());
          MARKUP t = new MARKUP(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 28:
          break;
        case 16: {
          yybegin(COMMENT);
          comment_count++;
        }
        case 29:
          break;
        case 20: {
          AMP t = new AMP(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 30:
          break;
        case 18: {
          if (--comment_count == 0)
            yybegin(YYINITIAL);
        }
        case 31:
          break;
        case 7: {
          NBSP t = new NBSP(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 32:
          break;
        case 15: {
          CAP t = new CAP(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 33:
          break;
        case 12: {
          PERIOD t = new PERIOD(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 34:
          break;
        case 10: {
          COLON t = new COLON(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 35:
          break;
        case 6: {
          BREAK t = new BREAK(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 36:
          break;
        case 9: {
          SEMICOLON t = new SEMICOLON(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 37:
          break;
        case 4: {
          NUM t = new NUM(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 38:
          break;
        case 17: {
          comment_count++;
        }
        case 39:
          break;
        case 2: {
          SPECIAL t = new SPECIAL(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 40:
          break;
        case 14: {
          QUESTION t = new QUESTION(cas);
          t.setBegin(yychar);
          t.setEnd(yychar + yytext().length());
          t.setTags(tags);
          return t;
        }
        case 41:
          break;
        case 1: {
        }
        case 42:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
              case YYINITIAL: {
                // SPECIAL t = new SPECIAL(cas);
                // t.setBegin(yychar);
                // t.setEnd(yychar + yytext().length());
                return null;
              }
              case 45:
                break;
              case COMMENT: {
                // SPECIAL t = new SPECIAL(cas);
                // t.setBegin(yychar);
                // t.setEnd(yychar + yytext().length());
                return null;
              }
              case 46:
                break;
              default:
                return null;
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

}
